import h5py
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
mpl = plt.matplotlib 
import matplotlib.dates as mdates
from datetime import datetime, timedelta
from astropy.time import Time
from barycorrpy import get_BC_vel, exposure_meter_BC_vel

#GRASS_rv: RV calculated from line profiles + granulation affects on
#GRASS_no_cb: RV calculated from line profiles + granulation affects off
#RV_list_no_cb: RV calculated form weighted projected velocities + no extra CB
#RV_list_cb: RV calculated form weighted projected velocities + with extra CB

def movingmedian(x, window):
    result = []
    start_ind = round(window / 2)
    sides = np.floor(window/2)
    
    while start_ind < len(x)-6:
        result.append(np.median(x[int(start_ind - sides):int(start_ind+sides)]))
        start_ind = start_ind + 1
    return result

# #swept
# GRASS_rv = [244.15998647927242, 244.75657904678945, 246.73338222750326, 247.51818067004314, 248.38365772100155, 252.62653970708573, 252.63501586822215, 253.40753897069035, 255.19887648996527, 256.10385127244945, 258.3980278484502, 260.4483211572061, 260.87032491172783, 262.0359272902524, 263.0271610850091, 265.7057387133399, 266.31378211217594, 266.62901275593794, 268.89818568090806, 270.77612877048654, 271.15957394832037, 273.01464583657685, 273.99946692472787, 275.92696801768665, 276.9366839201002, 278.57035007868785, 280.3701576200193, 281.58860547847047, 282.7223371716948, 284.2630775870037, 285.51958060555035, 287.49186298980925, 287.6230508166131, 287.2785053792391, 284.06748664991835, 279.119703086808, 272.58447814370135, 263.7660777229534, 256.16497690533123, 246.94680533682714, 237.41820515795246, 226.04510191224298, 214.806075444315, 201.97696485364062, 189.50282065625768, 178.4634001225448, 164.57622263775067, 151.54731910973143, 140.4123929047331, 127.28829443197311, 114.81283388336988, 103.06593883334328, 90.61845217124531, 77.66225629517218, 63.82537606489769, 52.95310172841415, 41.69785530117807, 30.629273250352725, 20.53280508793607, 10.361380952238822, -0.36872552252624147, -14.117762151803682, -21.600027589421686, -27.906580029675393, -36.67403360007529, -44.996423407176046, -52.13870976510038, -57.853816694042244, -63.882818277258544, -69.32364582948588, -73.3306939608618, -78.16166119604297, -80.24755438242549, -81.29196732768187, -80.8932004016525, -80.89835096310104, -79.232897750635, -76.97340284619628, -71.13514930960685, -66.13202019567261, -58.773477986339365, -49.30323493664513, -40.876787706201014, -29.34625755879248, -15.136914877345935, 0.8732395083763145, 19.239020557878995, 37.92171819341728, 61.89063216065846, 86.0330219033984, 113.59503079900432, 142.2748864631506, 169.17048889717128, 203.46900776259878, 239.37173660092208, 277.87062857081446, 316.5050702722573, 359.102006440044, 399.78092642004265, 444.2141508551061, 487.7249365363939, 535.2649576307168, 579.1161121102477, 625.4698217329745, 668.6983332130224, 711.2189311651139, 755.6451983646048, 794.945134608969, 833.1164006814772, 873.090587510937, 906.4873015722018, 937.803331680093, 968.800026540911, 995.2331445435211, 1018.2072753115547, 1039.4976824451069, 1058.0182858754013, 1073.551075440599, 1085.9622372216052, 1096.0528580417736, 1104.3327802753327, 1110.8351531846577, 1113.9613000265476, 1115.2493227090538, 1116.0131862558094, 1115.4266215104587, 1111.9310174756406, 1108.7395605348506, 1103.8504137568675, 1097.6822176188223, 1090.5369679161524, 1083.5319800341342, 1074.9449807845733, 1066.8153215388668, 1057.3291555387236, 1047.0419490477693, 1036.646049991508, 1026.0681825905194, 1012.8899794238831, 1003.9736387761529, 989.8645176811831, 977.9884227178507, 963.814820747894, 951.3860270838442, 936.4902662047476, 922.9340601703013, 909.806645971898, 894.8473698575414, 880.4106341207643, 864.5863696446538, 852.4720487174022, 837.0060809395284, 820.9872154609153, 806.0016866495267, 790.3620606263714, 773.5506626976064, 759.3347282084858, 742.379112844661, 726.850625937215, 712.6743807888733, 695.3105803441097, 679.8379925355532, 664.148869843079, 650.5427049568549, 635.700089397086, 620.678381398065, 606.8833004342641, 592.4879234302804, 579.8428103584343, 566.4703244716275, 555.2679980012813, 545.0540729231841, 534.7170608646628, 526.0153311301725, 518.3784033178616, 512.5833631740566, 507.99696542784085, 507.1470173201077, 507.2598134069464, 509.568530052733, 510.263695337926, 513.4778561766864, 514.0116259096618, 514.5822957308112, 516.5350761942365, 518.1211021829467, 519.0166527361114, 519.5271043327298, 521.4582724355075, 522.5076834090245, 524.6621021780883, 525.835798022547, 527.5186613069217, 528.826248690607, 530.614269209238, 531.9795287746238, 532.2949046195644, 535.0934803355403, 536.5445817014365, 538.3253192589447, 538.8767760873866, 540.204643243828, 542.744673731557, 543.4271565660573, 544.0858922449846, 545.9756210008569, 547.8220813295142, 549.4391987989945, 550.6885036022596, 552.6009814550036, 554.6876853050521, 556.5423009746013, 556.6701953713033, 559.2128230341376, 560.0761219482072, 562.1946093536736, 563.5271688566767, 564.7016689737418, 565.2614062153538, 567.2254027635987, 568.7573413501217, 571.1519807637637, 572.2560308254558, 573.3871509043851]
# GRASS_no_cb = [202.71799102876685, 204.36082007719148, 205.23262813078568, 206.9857432415918, 208.57665953488595, 208.83454722855666, 210.369866400429, 211.75014069727763, 213.3855820497854, 215.84777986779744, 217.40342911724196, 216.99999863126345, 217.9886957411325, 219.2705448919351, 220.10082455587548, 221.330287989687, 223.3232602552365, 223.732509573817, 225.75067430833482, 226.81297735949263, 228.760174091847, 229.6710827970796, 230.61704531316252, 233.2793344772963, 232.55719273855422, 235.58930719745533, 236.27748247337666, 237.10130202998565, 238.54284013444305, 241.41872676565447, 243.09314245509472, 244.26498591143866, 245.5596072514695, 244.2527243173935, 241.16049980746274, 232.24016213061324, 225.7101696008014, 216.93749330373134, 208.0089797041354, 197.41355432303695, 186.84049005763057, 173.02527734134827, 162.01266241539685, 151.20606641888742, 139.05905244032746, 126.17124717631364, 113.47277121254699, 100.83330497402049, 87.44263613239539, 74.27706498651509, 61.21954757548694, 48.75503000356676, 36.31917742453566, 23.26085913683582, 11.430566956352335, 0.017514916973723517, -9.888888967086396, -21.773251404122835, -32.55626634903035, -44.334574482616205, -52.57673287242445, -63.8018357653969, -71.3516169974312, -79.64108478325801, -87.89028900746794, -94.83090991228781, -103.01824337520374, -107.62051730416, -112.01581309219624, -114.7443886000221, -117.10034103163359, -122.29308361895768, -122.90720947623939, -123.36666447860102, -123.52660931191801, -122.00888234044771, -119.70082398734941, -116.61344240734702, -112.62082593774696, -107.58731694656765, -100.44249338286949, -90.725168883181, -79.6928469596707, -68.82079690594593, -54.71983564657912, -37.15880020432876, -18.239289585236214, 1.7214488832654773, 23.503759149074373, 48.68255175329975, 75.62505236574744, 108.36358571951601, 136.78807871654664, 171.59013552939405, 206.90492978783615, 245.05178745458082, 284.8668940725257, 326.52828165124265, 370.92241023989817, 415.1327834653035, 459.39907057591626, 506.24826592632274, 551.0471773937248, 596.5461259865618, 641.6552380243583, 684.9474103709176, 729.9015984309066, 769.4231463657716, 810.9820690649402, 849.6836760586199, 883.2125442132649, 915.4493443282337, 944.199731939314, 972.9640908856363, 993.6941630247411, 1016.2200740121284, 1034.4804913599344, 1047.639201117389, 1059.8769840743148, 1069.5225717648364, 1076.897125615252, 1082.0511160847984, 1085.3675220612581, 1084.9281317535806, 1083.518361757117, 1081.9716615828584, 1078.235215186808, 1073.7088332811402, 1066.1569368243224, 1057.5343800016624, 1052.738855439146, 1043.2070876427695, 1033.6193810368015, 1023.6450359730404, 1014.6477034151021, 1003.1823436462638, 990.9674305513578, 979.9944688532283, 966.7521582465442, 954.9026376861677, 940.3955351633514, 927.4112675873732, 913.2724556513436, 899.9583419028364, 885.387857516395, 871.604835129636, 857.1604618869209, 844.1790294272851, 826.2611474722947, 810.8538029119663, 794.0477562598817, 778.0913590416204, 764.1991721592657, 747.9677569984894, 732.6005958206475, 716.5171516018443, 702.6346315244879, 686.4810367011016, 669.5991849487999, 655.6614774637901, 639.2939163230866, 625.4400500941667, 609.9573911470545, 596.990117869564, 582.4997994524716, 568.9828231019176, 556.1294546065045, 543.8979356350794, 531.4014851879335, 520.3628358174478, 508.51775586734055, 498.9310714567806, 490.4407633625436, 483.1835912683958, 474.43840284206635, 471.04055019641237, 465.1421134362373, 464.3137197186497, 464.78538178830456, 465.581128807223, 467.446908154419, 470.21345366052293, 471.57601068210704, 472.3772174382247, 475.2746419434396, 475.7294593452739, 478.0728880875978, 479.2985381890132, 479.51621949848044, 481.499241960349, 483.67077207007065, 484.8739159199008, 486.2959937922805, 487.8983477998379, 490.24595575418647, 490.78858188055125, 490.9297975983614, 493.3441692180478, 495.0503320358863, 497.62452397139265, 497.9240753568569, 499.3822661028133, 500.4962566576436, 503.2159390086258, 503.6617728348408, 505.1697865234376, 506.72148701415506, 508.4811132319528, 509.60475009725053, 510.7613174448712, 513.4157757357978, 513.0793119260752, 514.9686678534159, 515.5336570866452, 517.3446687443412, 518.4605414962385, 519.8093082981553, 521.1602667064495, 522.478493096847, 523.5045752622059, 525.4292105833081, 526.5419175815717, 528.7755682671711, 529.544043143522]

# #read in data
# #model
# file = h5py.File("data/model_data_swept.jld2", "r")
# RV_list_no_cb = file["RV_list_no_cb"][()]
# RV_list_cb  = file["RV_list_cb"][()]
# intensity_list = file["intensity_list"][()]
# #data
# data_swept = np.load('data/2024-04-08_swept-rv.npz')
# data_time = [datetime.fromisoformat(i) for i in data_swept['timestamp']][3000:-3000]
# rv = [i for i in data_swept['rv']][3000:-3000]
# #remove outliers
# movingmedian_flux = movingmedian(rv, 11)
# #delete real data points which lie in the edges
# new_time = np.array(data_time[6:-6])
# new_flux = np.array(rv[6:-6])
# #determine outliers using sigma 3
# factor = (np.abs(new_flux - np.array(movingmedian_flux)))
# good_data = np.ma.masked_where(factor > 100, new_flux)
# good_time = np.ma.masked_where(factor > 100, new_time)
# df = pd.DataFrame()
# df["Time"] = good_time
# df["Value"] = good_data
# #binning
# df.set_index('Time', inplace=True)
# # Taking mean values for a frequency of 1 minute
# df_group = df.groupby(pd.Grouper(level='Time', freq='1T'))['Value'].agg('mean')   
# df_group.dropna(inplace=True)
# df_group = df_group.to_frame().reset_index()
# time_stamps_data = np.array(df_group["Time"]) 
# time_julian = (Time(time_stamps_data)).jd
# data_rv = np.array(df_group["Value"]) 

# vb, warnings, flag = get_BC_vel(JDUTC=time_julian, lat=39.995380 , longi=-105.262390 , alt=165.23, SolSystemTarget='Sun', predictive=False,zmeas=0.0)

# data_rv = np.array(data_rv)
# data_rv -= data_rv[-1]

# good_data = np.array(good_data)
# good_data -= good_data[-1]

# rv = np.array(rv)
# rv -= rv[-1]

# GRASS_rv = np.array(GRASS_rv + vb)
# GRASS_rv -= GRASS_rv[-1]

# GRASS_no_cb = np.array(GRASS_no_cb + vb)
# GRASS_no_cb -= GRASS_no_cb[-1]

# RV_list_no_cb = np.array(RV_list_no_cb + vb)
# RV_list_no_cb -= RV_list_no_cb[-1]

# RV_list_cb = np.array(RV_list_cb + vb)
# RV_list_cb -= RV_list_cb[-1]

# #rm curve 
# fig, axs = plt.subplots(2, sharex=True, sharey=False, gridspec_kw={'hspace': 0, 'height_ratios': [3, 1]})
# axs[0].scatter(time_stamps_data, data_rv, color = 'k', marker = "x", s = 18, label = "Heterodyne RVs") 
# axs[0].plot(time_stamps_data, RV_list_no_cb, color = 'r', linewidth = 2, label = "Weighted RVs - No CB")
# axs[0].plot(time_stamps_data, GRASS_no_cb, color = 'b', linewidth = 3, label = "Line RVs - No CB")
# axs[0].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
# axs[0].set_xlabel("Time (UTC)", fontsize=12)
# axs[0].set_ylabel("RV [m/s]", fontsize=12)
# rms_model_no_cb = round(np.sqrt((np.nansum((data_rv - RV_list_no_cb)**2))/len(data_rv - RV_list_no_cb)),2)
# axs[0].text(time_stamps_data[-100], -200, "Weighted RVs - No CB RMS {}".format(rms_model_no_cb))
# rms_grass_no_cb = round(np.sqrt((np.nansum((data_rv - GRASS_no_cb)**2))/len(data_rv - GRASS_no_cb)),2)
# axs[0].text(time_stamps_data[-100], -300, "Line RVs - No CB RMS {}".format(rms_grass_no_cb))
# axs[0].legend(fontsize=12, loc='upper left')
# plt.xticks(fontsize=12)
# plt.yticks(fontsize=12)
# #residuals
# axs[1].scatter(time_stamps_data, (data_rv) - RV_list_no_cb, color = 'r', marker = "x", s = 3) 
# axs[1].scatter(time_stamps_data, (data_rv) - GRASS_no_cb, color = 'b', marker = "x", s = 3)  
# axs[1].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
# axs[1].set_xlabel("Time (UTC)", fontsize=12)
# axs[1].set_ylabel("Residuals", fontsize=12) 
# plt.xticks(fontsize=12)
# plt.yticks(fontsize=12)
# plt.savefig("rm_and_residuals_swept.png")
# plt.show()

# #rm curve 
# fig, axs = plt.subplots(2, sharex=True, sharey=False, gridspec_kw={'hspace': 0, 'height_ratios': [3, 1]})
# axs[0].scatter(time_stamps_data, data_rv, color = 'k', marker = "x", s = 18, label = "Heterodyne RVs") 
# axs[0].plot(time_stamps_data, RV_list_cb, color = 'r', linewidth = 3, label = "Weighted RVs - CB")
# axs[0].plot(time_stamps_data, GRASS_rv, color = 'b', linewidth = 3, label = "GRASS")
# axs[0].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
# axs[0].set_xlabel("Time (UTC)", fontsize=12)
# axs[0].set_ylabel("RV [m/s]", fontsize=12)
# rms_model_cb = round(np.sqrt((np.nansum((data_rv - RV_list_cb)**2))/len(data_rv - RV_list_cb)),2)
# axs[0].text(time_stamps_data[-100], -200, "Weighted RVs - CB RMS {}".format(rms_model_cb))
# rms_grass_no_cb = round(np.sqrt((np.nansum((data_rv - GRASS_rv)**2))/len(data_rv - GRASS_rv)),2)
# axs[0].text(time_stamps_data[-100], -300, "GRASS RMS {}".format(rms_grass_no_cb))
# axs[0].legend(fontsize=12)
# plt.xticks(fontsize=12)
# plt.yticks(fontsize=12)
# #residuals
# axs[1].scatter(time_stamps_data, (data_rv) - RV_list_cb, color = 'r', marker = "x", s = 3) 
# axs[1].scatter(time_stamps_data, (data_rv) - GRASS_rv, color = 'b', marker = "x", s = 3)  
# axs[1].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
# axs[1].set_xlabel("Time (UTC)", fontsize=12)
# axs[1].set_ylabel("Residuals", fontsize=12) 
# plt.xticks(fontsize=12)
# plt.yticks(fontsize=12)
# plt.savefig("rm_and_residuals_cb_swept.png")
# plt.show()

#--------------------------------------

#dither
GRASS_rv = [274.9746491291567, 276.50769938700944, 277.55164732056807, 279.46010194070254, 281.3821753012031, 282.8678360926676, 283.0263478324115, 286.1312413646001, 286.0116986133762, 287.8427760977691, 287.1648424467768, 283.26904948490886, 279.07236156775974, 272.7359085425383, 263.6824621711733, 255.5767297654279, 246.27352409132422, 236.4852656537018, 226.7111636313009, 215.6953776908147, 202.85206529849447, 190.55867402647965, 177.9339958568379, 165.6405138313972, 152.1436572296142, 139.70708682453665, 126.05001548518855, 114.03375209334425, 102.29483535034217, 90.87820353086187, 77.40019739986974, 65.12729517674413, 53.49984427798729, 41.503920300507474, 31.365657612052484, 19.904309543739693, 8.084989208520575, -2.18221016745014, -13.040593517209699, -22.576010538607864, -29.063526110015783, -36.07495665215826, -44.4745674080805, -52.2504857607755, -59.44648270136957, -62.62178435717981, -68.5378947049742, -73.665424801937, -75.87636644804996, -79.62439047590193, -80.31536615942858, -81.43165797846191, -79.74967871583186, -80.72084535631127, -76.50310070416596, -71.82917749275227, -66.6118802279978, -59.025598717626686, -50.722897355554785, -41.64581115862926, -29.160280571472278, -15.822176057968552, 1.8342033180362183, 18.253185954633164, 37.12789589258409, 61.10811601681637, 84.02632521636988, 112.58104370912083, 142.58157424232496, 169.75163284088882, 203.989728823701, 242.98016936098904, 277.78948731638116, 316.80613861422415, 358.4919509308825, 401.32113750380273, 445.9442961124018, 490.5290105483882, 532.4619044610474, 579.4252150180076, 624.797750210423, 669.245036367599, 714.4518624927595, 754.8866054655608, 795.438226473216, 835.4361413500757, 873.0336674543078, 905.2266417920902, 940.2366073829996, 969.8631313212793, 995.6543422048902, 1017.40030312935, 1039.9877759683393, 1058.572365164021, 1073.7917472189645, 1086.4099751819554, 1096.6547588535286, 1103.9405332770452, 1109.447976358057, 1112.5124811552296, 1116.8432850347422, 1116.3383582548045, 1114.6931085782735, 1112.9978885490461, 1109.071247222002, 1104.1252013024045, 1098.17102556955, 1092.3870590588162, 1084.5586244781719, 1076.0934536378045, 1065.5629127371428, 1057.615635543114, 1046.5470481725997, 1035.6234957736488, 1025.358477807477, 1013.3567262493893, 1002.2408249611534, 989.5286302732701, 979.0861962551032, 964.6073735724044, 951.5647930327276, 937.2048453459253, 924.0140766624539, 910.7978963111594, 894.4602716331352, 880.4182855602006, 865.0421743417369, 851.4314953563824, 835.5178474940346, 821.1868593538547, 805.2724168509578, 790.4673322979403, 773.4591461489371, 759.8207411030223, 743.9990635942472, 726.2342066188442, 713.1293884725445, 695.7673154385955, 680.1704282371469, 665.3565445102499, 651.054131690766, 635.9792798361294, 621.9247194726403, 607.6077580779645, 592.6068132574082, 578.8200572521706, 567.3007324959234, 554.6394974541752, 544.6133585700045, 535.1884134611337, 525.6738248673745, 518.0277029638735, 512.6876564127024, 509.11641969165, 505.992521894679, 507.1441771312893, 509.62348318207535, 510.99000499933254, 512.8890548493183, 514.1693573564514, 514.1358374177726]
GRASS_no_cb = [233.0498823191008, 234.84272801462973, 235.26389317950049, 236.78370940748167, 238.95879663328193, 237.6685748548634, 241.18946608005243, 243.40816838636024, 243.82748683645625, 245.138950639928, 244.48759845834417, 240.11219332953843, 234.39805675115565, 225.1780081914668, 217.58708555425525, 207.6481478460292, 197.58912878152535, 185.40747433114672, 174.0330550622724, 162.6602076031273, 150.88652483620115, 139.47333249617654, 126.18718781373441, 112.78616471011668, 100.14430212124829, 87.50139304755405, 74.56620819312768, 60.60794914086099, 49.53179079940769, 36.95531409738404, 24.13072133251979, 12.80819261128844, 1.1941220256231646, -10.586991842640112, -21.20321306008742, -32.77881039416189, -43.45488058908151, -52.928076193082795, -62.114177418479066, -72.29568553597119, -80.25929806838855, -88.65360877032231, -95.88069930217462, -102.95518244661703, -108.47739550506091, -111.81596759914845, -115.04042124302545, -119.7514213757905, -120.99105008967102, -121.58914454007943, -125.69947435942062, -123.4747068588931, -122.41115495655794, -120.08412439865853, -118.07830085618643, -113.40241662020861, -108.08133570337101, -101.4999653300834, -92.63054671647171, -80.79512373867648, -69.5168138390035, -54.3971190385653, -35.367453548766875, -18.142445321468216, 2.6835749586316062, 23.46757686896794, 49.687383271523956, 76.11851729028005, 108.1188982436049, 137.90146609605625, 170.00902832706342, 205.4044469292376, 246.8039906291778, 285.78003802173004, 328.28767703756176, 370.0409007446649, 413.888197742999, 459.8314757886732, 506.7065421531493, 551.4723082312393, 596.2653998543803, 643.7422459072139, 687.157019628925, 730.1713633204164, 770.4381029743547, 809.9404471431227, 848.2175392152132, 882.8256431625422, 913.5135646182177, 943.5380078035683, 970.3167439861126, 994.0304099890387, 1016.6889920260269, 1032.4975583803205, 1047.3621970913164, 1059.8545568166605, 1070.5020423909866, 1078.2069791254999, 1082.083509737555, 1084.9391434205322, 1086.375568579253, 1084.8331586395516, 1081.4497007576695, 1077.423009952286, 1073.600966324676, 1066.0016505353626, 1059.971956149263, 1052.1881734176748, 1042.9841734947952, 1032.8994023538185, 1024.156860413136, 1013.0247758237151, 1002.957670095926, 991.3450328026814, 979.627461972236, 967.0405079272582, 953.8355012067638, 939.6098028970758, 927.6608092221594, 913.3148582725952, 899.8043658368209, 885.1079429327713, 871.4701494698371, 857.090714280336, 840.9794502158038, 827.5610756599447, 811.6396879570233, 793.3885720308239, 778.1357942975426, 764.7587856101774, 747.5244490743867, 732.9904056412746, 716.3741602138743, 700.7365620780706, 685.2879315934529, 670.0585907434432, 655.1876499340905, 638.8393103517517, 624.5623978636226, 610.2682574589899, 595.633075149872, 582.1805161299416, 568.5538341304718, 556.8622584718178, 543.8984276544386, 530.9329970459469, 520.4981162866152, 507.7329829926999, 498.1004557960239, 491.05744008094683, 482.0784961185177, 475.5101578150989, 470.16627051162726, 466.1322221110072, 463.8249239421116, 465.0622374693335, 466.48260708780316, 468.28629594450143, 470.3603772757089, 471.6111462432379, 471.5903118647454]

#read in data
#model
file = h5py.File("data/model_data_dither.jld2", "r")
RV_list_no_cb = file["RV_list_no_cb"][()]
RV_list_cb  = file["RV_list_cb"][()]
intensity_list = file["intensity_list"][()]
#data
data_dither = np.load('data/2024-04-08_dither-rv.npz')
data_time = [datetime.fromisoformat(i) for i in data_dither['timestamp']][17000:-16000]
rv = [i for i in data_dither['rv']][17000:-16000]
#remove outliers
movingmedian_flux = movingmedian(rv, 11)
#delete real data points which lie in the edges
new_time = np.array(data_time[6:-6])
new_flux = np.array(rv[6:-6])
#determine outliers using sigma 3
factor = (np.abs(new_flux - np.array(movingmedian_flux)))
good_data = np.ma.masked_where(factor > 20, new_flux)
good_time = np.ma.masked_where(factor > 20, new_time)
df = pd.DataFrame()
df["Time"] = good_time
df["Value"] = good_data
#binning
df.set_index('Time', inplace=True)
# Taking mean values for a frequency of 2 minutes
df_group = df.groupby(pd.Grouper(level='Time', freq='1T'))['Value'].agg('mean')   
df_group.dropna(inplace=True)
df_group = df_group.to_frame().reset_index()
time_stamps_data = np.array(df_group["Time"]) 
time_julian = (Time(time_stamps_data)).jd
data_rv = np.array(df_group["Value"]) 

vb, warnings, flag = get_BC_vel(JDUTC=time_julian, lat=39.995380 , longi=-105.262390 , alt=165.23, SolSystemTarget='Sun', predictive=False,zmeas=0.0)

data_rv = np.array(data_rv)
data_rv -= data_rv[-1]

GRASS_rv = np.array(GRASS_rv + vb)
GRASS_rv -= GRASS_rv[-1]

GRASS_no_cb = np.array(GRASS_no_cb + vb)
GRASS_no_cb -= GRASS_no_cb[-1]

RV_list_no_cb = np.array(RV_list_no_cb + vb)
RV_list_no_cb -= RV_list_no_cb[-1]

RV_list_cb = np.array(RV_list_cb + vb)
RV_list_cb -= RV_list_cb[-1]

#rm curve 
fig, axs = plt.subplots(2, sharex=True, sharey=False, gridspec_kw={'hspace': 0, 'height_ratios': [3, 1]})
axs[0].scatter(time_stamps_data, data_rv, color = 'k', marker = "x", s = 18, label = "Heterodyne RVs") 
axs[0].plot(time_stamps_data, RV_list_no_cb, color = 'r', linewidth = 2, label = "Weighted RVs - No CB")
axs[0].plot(time_stamps_data, GRASS_no_cb, color = 'b', linewidth = 3, label = "Line RVs - No CB")
axs[0].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[0].set_xlabel("Time (UTC)", fontsize=12)
axs[0].set_ylabel("RV [m/s]", fontsize=12)
rms_model_no_cb = round(np.sqrt((np.nansum((data_rv - RV_list_no_cb)**2))/len(data_rv - RV_list_no_cb)),2)
axs[0].text(time_stamps_data[-85], -200, "Weighted RVs - No CB RMS {}".format(rms_model_no_cb))
rms_grass_no_cb = round(np.sqrt((np.nansum((data_rv - GRASS_no_cb)**2))/len(data_rv - GRASS_no_cb)),2)
axs[0].text(time_stamps_data[-85], -300, "Line RVs - No CB RMS {}".format(rms_grass_no_cb))
axs[0].legend(fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
#residuals
axs[1].scatter(time_stamps_data, (data_rv) - RV_list_no_cb, color = 'r', marker = "x", s = 3) 
axs[1].scatter(time_stamps_data, (data_rv) - GRASS_no_cb, color = 'b', marker = "x", s = 3)  
axs[1].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[1].set_xlabel("Time (UTC)", fontsize=12)
axs[1].set_ylabel("Residuals", fontsize=12) 
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.savefig("rm_and_residuals_dither.png")
plt.show()

#rm curve 
fig, axs = plt.subplots(2, sharex=True, sharey=False, gridspec_kw={'hspace': 0, 'height_ratios': [3, 1]})
axs[0].scatter(time_stamps_data, data_rv, color = 'k', marker = "x", s = 18, label = "Heterodyne RVs") 
axs[0].plot(time_stamps_data, RV_list_cb, color = 'r', linewidth = 3, label = "Weighted RVs - CB")
axs[0].plot(time_stamps_data, GRASS_rv, color = 'b', linewidth = 3, label = "GRASS")
axs[0].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[0].set_xlabel("Time (UTC)", fontsize=12)
axs[0].set_ylabel("RV [m/s]", fontsize=12)
rms_model_cb = round(np.sqrt((np.nansum((data_rv - RV_list_cb)**2))/len(data_rv - RV_list_cb)),2)
axs[0].text(time_stamps_data[-85], -200, "Weighted RVs - CB RMS {}".format(rms_model_cb))
rms_grass_no_cb = round(np.sqrt((np.nansum((data_rv - GRASS_rv)**2))/len(data_rv - GRASS_rv)),2)
axs[0].text(time_stamps_data[-85], -300, "GRASS RMS {}".format(rms_grass_no_cb))
axs[0].legend(fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
#residuals
axs[1].scatter(time_stamps_data, (data_rv) - RV_list_cb, color = 'k', marker = "x", s = 3) 
axs[1].scatter(time_stamps_data, (data_rv) - GRASS_rv, color = 'b', marker = "x", s = 3)  
axs[1].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[1].set_xlabel("Time (UTC)", fontsize=12)
axs[1].set_ylabel("Residuals", fontsize=12) 
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.savefig("rm_and_residuals_cb_dither.png")
plt.show()