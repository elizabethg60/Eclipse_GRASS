import h5py
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
mpl = plt.matplotlib 
import matplotlib.dates as mdates
from datetime import datetime, timedelta
from astropy.time import Time
from barycorrpy import get_BC_vel, exposure_meter_BC_vel

GRASS_rv = [-1003.9902389823887, -1005.2410521190826, -1001.7309834339842, -1002.5026035749827, -999.3930142404917, -996.6258483487778, -995.0151776616742, -993.9340913720072, -995.9979343856252, -993.8306710293929, -993.040263042412, -991.1895338044486, -993.3183677115615, -986.8033242616887, -986.3976262062474, -977.9818587128118, -981.4689312983699, -982.3659445705409, -978.6452200013134, -979.2511464548896, -974.9594906228612, -974.1587036283028, -971.2440010978016, -973.9845465588933, -969.8239378645283, -977.5124698239752, -984.3611918770137, -997.2835365182315, -1011.4499843508966, -1032.7616426475026, -1054.422840891578, -1071.6140558893221, -1098.422018741645, -1126.2795612139741, -1153.8066463223904, -1184.304833262305, -1211.9909440878307, -1251.5122278361828, -1281.369629376518, -1320.1856833527993, -1352.4087164884297, -1389.5660852337164, -1427.502298908343, -1467.3727221017825, -1527.9399341767623, -1570.7536103175548, -1608.6917755290128, -1644.5486133950587, -1670.1969426892097, -1675.7765063809961, -1626.133749078952, -1490.5079191407453, -1163.2594391466837, -595.587750443738, -78.71022828176439, 143.6459700528709, 187.05979714596032, 165.95038118134337, 108.14451964118615, 51.982280104359745, -13.280692482339688, -68.80967608956716, -124.87725676783128, -173.09058749876374, -219.66804560737364, -261.50351917375883, -302.0227656174292, -337.0117738708321, -372.1209075411326, -401.3717848152429, -444.34500566949913, -472.44663922511324, -497.1149468973739, -519.2046005536719, -564.2680553055297, -604.7117155121364, -636.0077384650622, -663.2054363026854, -687.5092575818106, -708.7792503348415, -723.1899744689385, -739.6208810830772, -748.7453294912788, -755.7268419170508, -751.4647634535329, -749.2160049967579, -742.9442320764205, -740.2418827523561, -737.858827668569, -731.4807462949442, -727.9072492627171, -722.6184344225488, -723.0671330855737, -717.2942130686947, -713.5138759911226, -710.006975643943, -704.1284549736839, -696.9010416723129, -694.0611316924624, -688.370210265576, -684.6693884759948, -680.620178162663, -677.254935871703, -673.061675290433, -669.6599049441829, -666.0406876062813, -663.5632961937451, -659.456238821359, -651.8367491145326, -647.6414095926119, -647.1803329360501, -642.6119831928225, -635.5869911787084, -632.6707017086978, -627.8611494212657, -625.9478969311278, -622.7389091591612, -621.3085754855532, -611.4918774822652, -610.2162032295088, -604.9211089273622, -603.303622237182, -599.1175113938124, -592.2432811409373, -591.1106231614491, -582.68623829721, -585.2261947256685, -579.3426869221296, -575.831159060327, -570.8053378973359, -567.0840611213679, -563.5342638017513, -555.5255405793953, -554.7529912404144, -551.3218968246047, -547.4675818572871, -540.3132737817822, -539.1872043256379, -533.7254678907263, -526.9714459275691, -524.4827590856536, -522.4771732105114, -521.6772197684595, -517.4762736411051, -511.66871695566994, -505.22868302266824, -503.1863209714431, -500.51328781444016, -494.81677183831414, -493.8014228012891, -487.6211068996739, -481.80464606384214, -479.19274303514044, -476.41549104153813, -476.8094771430096, -469.48262799902585, -469.6826433155577, -462.7873562930082, -462.9122255832131, -457.6867927472601, -451.1974336568627, -449.06705120412977, -444.23424429432583, -443.5819563717697, -436.49761901872336, -435.93240890718874, -433.5120095094765, -429.01708849921584, -424.14130306706403, -420.564634219184, -420.8103710636709, -415.9989633003602, -412.1601630821256, -408.62833066642185, -410.768345495548, -398.80864380801785, -393.5105102334183, -392.62229625679794, -389.1883967584794, -387.55835555288576, -385.8681218908839, -379.47872682387964, -377.8421074730508, -373.84960063525614, -371.9485329746503, -369.5699266285456, -364.51284317392674, -363.8947162952167, -358.9359489380635, -358.43679771372615, -355.0070249540222, -351.13031368289523, -346.9491811005616, -345.2421891588573, -343.3904353824249, -341.3434682351067, -339.5077109158274, -334.0092725218394, -331.5679574756076, -330.2364989202144, -324.50000354254007, -324.51524142371716]

#read in data
#model
file = h5py.File("data/model_data.jld2", "r")
RV_list_no_cb = file["RV_list_no_cb"][()][20:-100]
RV_list_cb  = file["RV_list_cb"][()][20:-100]
intensity_list = file["intensity_list"][()][20:-100]
#data 
data = pd.read_csv("data/EXPRES_Data.csv")
rv_obs = list(data["rv"][20:-100])
UTC_time = []
time_julian = []
for i in data["tobs"][20:-100]:
    dt = datetime.strptime(i, "%Y-%m-%d %H:%M:%S")
    UTC_time.append(dt)
    time_julian.append((Time(dt)).jd)

vb, warnings, flag = get_BC_vel(JDUTC=time_julian, lat=34.744444 , longi=-111.421944 , alt=235.9152, SolSystemTarget='Sun', predictive=False,zmeas=0.0)

rv_obs = np.array(rv_obs)
rv_obs -= rv_obs[-1]

GRASS_rv = np.array(GRASS_rv[20:-100] + vb)
GRASS_rv -= GRASS_rv[-1]

RV_list_no_cb = np.array(RV_list_no_cb + vb)
RV_list_no_cb -= RV_list_no_cb[-1]

RV_list_cb = np.array(RV_list_cb + vb)
RV_list_cb -= RV_list_cb[-1]    

#rm curve 
fig, axs = plt.subplots(2, sharex=True, sharey=False, gridspec_kw={'hspace': 0, 'height_ratios': [3, 1]})
axs[0].scatter(UTC_time, rv_obs, color = 'k', marker = "x", s = 15, label = "EXPRES RVs") 
axs[0].plot(UTC_time, RV_list_no_cb , color = 'r',  label = "Model - No CB")
axs[0].plot(UTC_time, GRASS_rv, color = 'b', linewidth = 3, label = "GRASS")
axs[0].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[0].set_xlabel("Time (UTC)")
axs[0].set_ylabel("RV [m/s]")
rms_model_no_cb = round(np.sqrt((np.nansum((rv_obs - RV_list_no_cb)**2))/len(rv_obs - RV_list_no_cb)),2)
axs[0].text(UTC_time[-40], -400, "Model RMS {}".format(rms_model_no_cb))
rms_grass_no_cb = round(np.sqrt((np.nansum((rv_obs - GRASS_rv)**2))/len(rv_obs - GRASS_rv)),2)
axs[0].text(UTC_time[-40], -500, "GRASS RMS {}".format(rms_grass_no_cb))
axs[0].legend()
#residuals
axs[1].scatter(UTC_time, (rv_obs) - RV_list_no_cb, color = 'r', marker = "x", s = 1)   
axs[1].scatter(UTC_time, (rv_obs) - GRASS_rv, color = 'b', marker = "x", s = 3)  
axs[1].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[1].set_xlabel("Time (UTC)")
axs[1].set_ylabel("Residuals") 
plt.savefig("rm_and_residuals_no_cb.png")
plt.show()

#rm curve 
fig, axs = plt.subplots(2, sharex=True, sharey=False, gridspec_kw={'hspace': 0, 'height_ratios': [3, 1]})
axs[0].scatter(UTC_time, rv_obs, color = 'k', marker = "x", s = 15, label = "EXPRES RVs") 
axs[0].plot(UTC_time, RV_list_cb , color = 'r', label = "Model - CB")
axs[0].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[0].set_xlabel("Time (UTC)")
axs[0].set_ylabel("RV [m/s]")
rms_model_cb = round(np.sqrt((np.nansum((rv_obs - RV_list_cb)**2))/len(rv_obs - RV_list_cb)),2)
axs[0].text(UTC_time[-40], -400, "Model RMS {}".format(rms_model_cb))
axs[0].legend()
#residuals 
axs[1].scatter(UTC_time, (rv_obs) - RV_list_cb, color = 'r', marker = "x", s = 1)  
axs[1].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[1].set_xlabel("Time (UTC)")
axs[1].set_ylabel("Residuals") 
plt.savefig("rm_and_residuals_cb.png")
plt.show()