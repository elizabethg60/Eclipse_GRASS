import h5py
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
mpl = plt.matplotlib 
import matplotlib.dates as mdates
from datetime import datetime, timedelta
from astropy.time import Time
from barycorrpy import get_BC_vel, exposure_meter_BC_vel

#read in data
#model
file = h5py.File("model_data.jld2", "r")
RV_list_no_cb = file["RV_list_no_cb"][()]
RV_list_cb  = file["RV_list_cb"][()]
intensity_list = file["intensity_list"][()]
RA_list = file["RA_list"][()]
dec_list = file["dec_list"][()]
vel_no_cb = file["vel_no_cb"][()]
vel_cb = file["vel_cb"][()]
#data 
data = pd.read_csv("NEID_Data.csv")
rv_obs = list(data["ccfrvmod"][15:-150]*1000 + 644.9)
UTC_time = []
time_julian = []
for i in data["obsdate"][15:-150]:
    dt = datetime.strptime(i, "%Y-%m-%d %H:%M:%S") + timedelta(seconds=27.5)
    UTC_time.append(dt)
    time_julian.append((Time(dt)).jd)

vb, warnings, flag = get_BC_vel(JDUTC=time_julian, lat=31.9583 , longi=-111.5967, alt=209.7938, SolSystemTarget='Sun', predictive=False,zmeas=0.0)

rv_obs = np.array(rv_obs)
rv_obs -= rv_obs[-1]

RV_list_no_cb = np.array(RV_list_no_cb + vb)
RV_list_no_cb -= RV_list_no_cb[-1]

RV_list_cb = np.array(RV_list_cb + vb)
RV_list_cb -= RV_list_cb[-1]

# i_test = [1.1626823705888215e12, 1.1488201833361194e12, 1.1354156371838242e12, 1.1186531061618718e12, 1.105243066079956e12, 1.0888288903529199e12, 1.0703060555732983e12, 1.0566099362411768e12, 1.0344708316365687e12, 1.0196402213047363e12, 9.971903353639198e11, 9.820594240211697e11, 9.590225296094373e11, 9.367463158470146e11, 9.176562752794862e11, 8.97632745698712e11, 8.716256676091902e11, 8.51091534948703e11, 8.316693507397372e11, 8.073823523350574e11, 7.850786678884551e11, 7.604218420414877e11, 7.368468044115514e11, 7.1468258040591e11, 6.959943176669817e11, 6.713019242212396e11, 6.527798798083921e11, 6.209276148533203e11, 6.014999621845457e11, 5.817260853092744e11, 5.609709807275038e11, 5.3552496142588324e11, 5.123324806637977e11, 4.918833976669023e11, 4.6786629993540106e11, 4.5240135716950415e11, 4.304816280218322e11, 4.074682719733035e11, 3.8862731421196625e11, 3.732325084683415e11, 3.5583829150612305e11, 3.432807666783296e11, 3.3027073379046643e11, 3.1100624171761646e11, 3.0295656278300183e11, 2.952938001681888e11, 2.875768793013422e11, 2.847999363638438e11, 2.8175837994390857e11, 2.828470623660842e11, 2.828601866090097e11, 2.9097717365109076e11, 2.972386122874585e11, 3.0481541487981824e11, 3.160364307794327e11, 3.281580347875343e11, 3.4284127224281537e11, 3.5840686385060266e11, 3.790958565632874e11, 3.9192137962174255e11, 4.1575170634698773e11, 4.2855643373676373e11, 4.4973044377099176e11, 4.67900269553256e11, 4.920120018068751e11, 5.0954881259840045e11, 5.334779881598997e11, 5.537392755385721e11, 5.772058264698676e11, 5.946874849437811e11, 6.209783686218793e11, 6.382796323231481e11, 6.602860248026292e11, 6.817157668558365e11, 7.022730891473557e11, 7.225061220137979e11, 7.446819341420115e11, 7.659637363504171e11, 7.825535979329907e11, 8.085380139501158e11, 8.219861893525203e11, 8.474510081945303e11, 8.648375648859938e11, 8.838220077027643e11, 9.043112359226172e11, 9.22614360339615e11, 9.410816469246925e11, 9.55542240650848e11, 9.762851954097814e11, 9.937413856865492e11, 1.0112742072934885e12, 1.0242774551429519e12, 1.044614223656567e12, 1.0564747417348596e12, 1.0751909692352831e12, 1.0873232469091296e12, 1.1046144050586814e12, 1.1122942606719814e12, 1.1287864980326194e12, 1.139202302313365e12, 1.154616306792637e12, 1.1616612195535715e12, 1.1730299290547222e12, 1.1833123431657336e12, 1.1926672451964153e12, 1.2023073024479614e12, 1.2102979790130405e12, 1.2174665457470264e12, 1.2234251744157466e12, 1.230014927165886e12, 1.2347797870599722e12, 1.238541174935615e12, 1.2412157709002515e12, 1.2432215645726064e12, 1.2439947517558247e12, 1.2440046186588464e12, 1.2440047478737622e12, 1.2440047481739216e12, 1.244004776518753e12, 1.2440047633058972e12, 1.2440047629998865e12, 1.244004801301086e12, 1.2440048260601199e12, 1.2440049456688794e12, 1.244004945654503e12, 1.244004902460404e12, 1.2440049664107742e12, 1.2440050037695713e12, 1.2440049717369846e12, 1.2440050786413591e12, 1.2440051239698872e12, 1.244005123996633e12, 1.2440051738696848e12, 1.2440052205991182e12, 1.244005215500902e12, 1.2440052216919927e12, 1.244005256843302e12, 1.2440052875211758e12, 1.2440053250100684e12, 1.2440054341592463e12, 1.244005480186795e12, 1.244005450257714e12, 1.2440055296408408e12, 1.2440055178749353e12, 1.2440055452787441e12, 1.2440055819321985e12, 1.2440056456106287e12, 1.2440056937673645e12, 1.2440056461001091e12, 1.244005631669701e12, 1.2440057143867678e12, 1.2440057569736677e12, 1.244005845472361e12, 1.2440059012655508e12, 1.2440059227483608e12, 1.2440059629242112e12, 1.2440059771530593e12, 1.2440060187447136e12]
# rv_test = [-905.1692246061579, -918.626683421299, -931.8229759363933, -947.2503803310764, -959.4191718318901, -974.6937724122868, -991.3291205072596, -1003.8484302212873, -1023.1171033984492, -1037.1561771300517, -1056.0316194747775, -1069.1967253354258, -1088.6490134147268, -1107.6709338143041, -1121.2675063003298, -1134.9319625916496, -1158.1705554479408, -1173.4032331196006, -1187.9534527313965, -1203.6145227812046, -1217.7179610484818, -1235.483417391253, -1253.8978519411223, -1265.5293709464195, -1273.4252902210224, -1283.5254329806517, -1298.0309664599754, -1313.2875873142093, -1320.1426666708599, -1318.5758258633018, -1324.6647631761557, -1323.7706019125765, -1334.1770324390868, -1328.5211608290049, -1316.286686048586, -1310.4371347496754, -1286.66353879615, -1266.5386329488315, -1242.8176311579768, -1209.8869075243563, -1166.840433576398, -1113.2097458305, -1037.0038617727014, -972.8758633741979, -889.1760004227665, -800.1853628085622, -698.4918575158387, -590.6661869204954, -492.9636822393623, -373.00434545933115, -289.980398092047, -195.00094350593872, -127.88090801380145, -67.69239677246276, -16.417825024206877, 28.353377109134613, 51.62808763048588, 72.56634270509676, 86.64568876709131, 88.98567346194147, 91.899334976354, 95.27345065902239, 89.84766869620864, 78.17960150242743, 65.80517680624496, 54.69840124150073, 39.83307136381109, 22.577541517527493, 7.903327507631957, -6.72789596964185, -28.049724745748335, -43.00744574479461, -59.53910850075795, -80.67203073952874, -99.61786005633587, -116.42803465222607, -137.62790840383138, -156.15587258800497, -172.80499478131128, -195.6893529201111, -208.82843881560598, -232.07030017364553, -249.82390453551875, -267.29523933348645, -287.07779464500067, -304.76268085731317, -321.97665571414836, -336.13295927959035, -356.2072240512572, -373.99185245705314, -390.60447059424905, -403.4064788722534, -423.59313347488467, -435.16567103345693, -454.17214399269795, -466.2913681387336, -483.7007854940172, -490.5808938886897, -507.5230266101943, -517.9300913839788, -533.9146107721117, -540.1785093932424, -551.6288025771747, -561.6214541475449, -571.0479149367567, -580.4652888801489, -588.048461536629, -594.5954841087637, -599.5210072348162, -605.4512644053675, -608.6800476286217, -610.8470766203131, -611.5599387606076, -611.0708158693678, -609.0127970386283, -606.6801672003012, -604.4105506449617, -602.1640816942211, -599.8866090182455, -597.6049363586675, -595.3470926569997, -593.0580924312409, -590.8380699139067, -588.5697191049242, -586.2701047197962, -583.9673859748056, -581.7592272319257, -579.4501333251461, -577.1373822122074, -574.8501836073253, -572.5315546934183, -570.2102923843352, -567.9144927075585, -565.5875554645736, -563.2582172240889, -560.9265271317911, -558.6952621687896, -556.3581631421356, -554.0677881690559, -551.7551869824348, -549.4120548544606, -547.0669124183269, -544.7483695132333, -542.3995549055032, -540.1863169695744, -537.8626378882059, -535.5087619318707, -533.232305044653, -530.9038756647548, -528.5698026366505, -526.2102880173398, -523.8783044975272, -521.5166896826312, -519.154063161209, -516.8748962163747, -514.5107234989986, -512.1456961716142, -509.78003386625033]
# rv_test = np.array(rv_test + vb)
# rv_test -= rv_test[-1]

#rm curve 
fig, axs = plt.subplots(2, sharex=True, sharey=False, gridspec_kw={'hspace': 0, 'height_ratios': [3, 1]})
axs[0].scatter(UTC_time, rv_obs, color = 'k', marker = "x", s = 15, label = "NEID RVs") 
axs[0].plot(UTC_time, RV_list_no_cb, color = 'r', label = "Model - No CB")
#axs[0].plot(UTC_time, rv_test, color = 'g', label = "GRASS")
axs[0].plot(UTC_time, RV_list_cb, color = 'g', label = "Model - CB")
axs[0].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[0].set_xlabel("Time (UTC)")
axs[0].set_ylabel("RV [m/s]")
axs[0].legend()
#residuals
axs[1].scatter(UTC_time, (rv_obs) - RV_list_no_cb, color = 'r', marker = "x", s = 1) 
#axs[1].scatter(UTC_time, (rv_obs) - rv_test, color = 'g', marker = "x", s = 1)  
axs[1].scatter(UTC_time, (rv_obs) - RV_list_cb, color = 'g', marker = "x", s = 1)  
axs[1].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
axs[1].set_xlabel("Time (UTC)")
axs[1].set_ylabel("Residuals") 
plt.savefig("rm_and_residuals.png")
plt.show()

#intensity
fig = plt.figure()
ax1 = fig.add_subplot()
ax1.scatter(UTC_time, intensity_list, label = "Model") 
#ax1.scatter(UTC_time, i_test, color = 'g', label = "GRASS")  
ax1.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
ax1.set_xlabel("Time (UTC)")
ax1.set_ylabel("Relative Intensity") 
#plt.legend()
plt.savefig("intensity.png")
plt.show()

# #projected solar velocities at each timestamp for eclipse movie
# for i in range(1,len(vel_no_cb)):
#     vel = file[vel_no_cb[i]][()]
#     ra = file[RA_list[i]][()]
#     dec = file[dec_list[i]][()]

#     cnorm = mpl.colors.Normalize(np.min(vel), np.max(vel))
#     colors = mpl.cm.seismic(cnorm(vel))
#     pcm = plt.pcolormesh(ra, dec, vel, cmap="seismic",vmin=-2000, vmax=2000)
#     cb = plt.colorbar(pcm, norm=cnorm, ax=plt.gca())
#     plt.gca().invert_xaxis()
#     cb.set_label("projected velocity (m/s)")
#     plt.xlabel("RA")
#     plt.ylabel("dec")
#     plt.savefig("movie/projected_vel_{}.png".format(i))
#     plt.clf()